package main

/**
 * Author: Oliver McLane
 *
 * This programs is designed to allow users to interact with a GUI and query malware hashes and even submit local files for analysis via the Hybrid-Analysis API.
 * The information is provided in 3 different reports, the first report will be basic information and details about the malware.
 * The MITRE ATT&CK report, provides different Mitre information such as tactic and technique.
 * Finally the third report Signatures Report, highlights the different environment behaviors and detected attack signatures.
 * Designed on the Fyne.io framework, we are also provided the options of dark mode and light mode.
 *
 */
import (
	"GoLangMalwareAnalysisGUI/MalwareAnalysis"
	"encoding/json"
	"fmt"
	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/layout"
	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/widget"
	"net/url"
	"os"
	"path/filepath"
	"strconv"
	"strings"
)

var (
	apiKey            = "ENTER-API-KEY-HERE"
	mitreCurrentPage  = 1 // Start on page 1
	mitreItemsPerPage = 5 // Five mitre items per page
	signItemsPerPage  = 1 // One signature per page
	signCurrentPage   = 1 // Start on page 1
)

// main Runs the main GUI loop
func main() {
	if apiKey == "ENTER-API-KEY-HERE" {
		fmt.Println("Configure MalwareAnalysis apiKey!")
	} else {
		// Starting new fyne application
		a := app.New()
		w := a.NewWindow("Go Lang Malware Analysis Tool")

		//Theme Settings
		isDark := false
		a.Settings().SetTheme(theme.LightTheme())

		// Create pagination controls
		MitreprevBtn := widget.NewButton("Previous", func() {})
		MitrenextBtn := widget.NewButton("Next", func() {})
		MitrepaginationControls := container.NewHBox(MitreprevBtn, MitrenextBtn)

		SignprevBtn := widget.NewButton("Previous", func() {})
		SignnextBtn := widget.NewButton("Next", func() {})
		SignpaginationControls := container.NewHBox(SignprevBtn, SignnextBtn)

		// Input field for hash
		input := widget.NewEntry()
		input.SetPlaceHolder("Enter known file hash")

		// Rich Text Widgets for Reports
		malwarereport := widget.NewRichTextFromMarkdown("## Malware details will be displayed here")
		mitrereport := widget.NewRichTextFromMarkdown("## MITRE ATT&CK details will be displayed here")
		signaturesreport := widget.NewRichTextFromMarkdown("## Signatures details will be displayed here")

		// File Input button and handler
		openFileBtn := widget.NewButton("Select file to scan", func() {
			mitreCurrentPage = 1 // Start on page 1
			signCurrentPage = 1  // Start on page 1
			dialog.NewFileOpen(func(reader fyne.URIReadCloser, err error) {
				if err != nil {
					dialog.ShowError(err, w)
					return
				}
				if reader == nil {
					return
				}
				defer func(reader fyne.URIReadCloser) {
					err := reader.Close()
					if err != nil {
						dialog.ShowError(fmt.Errorf("issue with reader contact provider: %s", err), w)
					}
				}(reader)

				//Reader.URI() provides a file path
				fileURI := reader.URI()
				localFilePath, err := url.QueryUnescape(fileURI.String()[len("file://"):]) // This trims the "file://" part and unescapes the URL
				if err != nil {
					dialog.ShowError(fmt.Errorf("error converting URI to local file path: %s", err), w)
					return
				}

				// Open the local file
				localFile, err := os.Open(fileURI.String()[len("file://"):])
				if err != nil {
					dialog.ShowError(fmt.Errorf("error opening local file: %s", err), w)
					return
				}
				defer func(localFile *os.File) {
					err := localFile.Close()
					if err != nil {
						dialog.ShowError(fmt.Errorf("error closing local file: %s", err), w)
					}
				}(localFile)

				// Send the opened file for analysis
				fileName := filepath.Base(localFilePath)
				jsonResponse, err := MalwareAnalysis.AnalyzeFile(localFile, fileName, apiKey)
				if err != nil {
					dialog.ShowError(err, w)
					return
				}

				// Parse JSON response into AnalysisResponse
				var analysisResponse MalwareAnalysis.AnalysisResponse
				if err := json.Unmarshal([]byte(jsonResponse), &analysisResponse); err != nil {
					dialog.ShowError(err, w)
					return
				}

				//Update reports
				updateSignReport(signaturesreport, analysisResponse.Signatures, &signCurrentPage, SignprevBtn, SignnextBtn)
				updateMitreReport(mitrereport, analysisResponse.MitreAttacks, &mitreCurrentPage, MitreprevBtn, MitrenextBtn)
				updateMalwareReportAnalysis(malwarereport, analysisResponse)
			}, w).Show()
		})

		// Button to search hash
		searchHashBtn := widget.NewButton("Search entered hash", func() {
			hash := input.Text
			mitreCurrentPage = 1 // Start on page 1
			signCurrentPage = 1  // Start on page 1

			jsonResponse, err := MalwareAnalysis.DetailsHash(hash, apiKey)
			if err != nil {
				return
			}

			var hashResponses []MalwareAnalysis.HashResponse
			if err := json.Unmarshal([]byte(jsonResponse), &hashResponses); err != nil {
				dialog.ShowError(fmt.Errorf("Invalid or incomplete hash"), w)
				return
			}

			//Update the different reports based on responses
			updateSignReport(signaturesreport, hashResponses[0].Signatures, &signCurrentPage, SignprevBtn, SignnextBtn)
			updateMitreReport(mitrereport, hashResponses[0].MitreAttacks, &mitreCurrentPage, MitreprevBtn, MitrenextBtn)
			updateMalwareReportHash(malwarereport, hashResponses[0])
		})

		// Help button that shows the popup
		helpBtn := widget.NewButton("Help", func() {
			showHelpDialog(a, w)
		})

		// Theme switcher button
		themeSwitcher := widget.NewButton("Switch Theme", func() {
			if isDark {
				a.Settings().SetTheme(theme.LightTheme())
				isDark = false
			} else {
				a.Settings().SetTheme(theme.DarkTheme())
				isDark = true
			}
			w.Content().Refresh()
		})

		// Tabs for different reports
		tabs := container.NewAppTabs(
			container.NewTabItem("Malware Report", malwarereport),
			container.NewTabItem("MITRE ATT&CK Report", container.NewVBox(mitrereport, layout.NewSpacer(), MitrepaginationControls)),
			container.NewTabItem("Signatures Report", container.NewVBox(signaturesreport, layout.NewSpacer(), SignpaginationControls)),
		)

		//Positioning containers in buttons
		leftSideButtonContainer := container.NewVBox(openFileBtn, layout.NewSpacer(), helpBtn, themeSwitcher)
		topComponent := container.New(layout.NewBorderLayout(nil, nil, nil, searchHashBtn), input, searchHashBtn)

		// Main content with a border layout
		content := container.NewBorder(
			topComponent,
			nil,
			leftSideButtonContainer,
			nil,
			tabs,
		)

		w.SetContent(content)
		w.Resize(fyne.NewSize(1150, 600))
		w.ShowAndRun()
	}
}

// updateMalwareReportHash updates the RichText widget's content with the given Markdown text when provided a HashResponse.
func updateMalwareReportHash(rt *widget.RichText, hashResponse MalwareAnalysis.HashResponse) {
	var sb strings.Builder

	sb.WriteString("# General Details\n")
	switch hashResponse.Verdict {
	case "malicious":
		sb.WriteString(fmt.Sprintf(
			"---------\n"+
				"## ⚠ Verdict: %s\n\n"+
				"---------\n", hashResponse.Verdict))
	case "no specific threat":
		sb.WriteString(fmt.Sprintf(
			"---------\n"+
				"## ✔ Verdict: %s\n\n"+
				"---------\n", hashResponse.Verdict))
	case "suspicious":
		sb.WriteString(fmt.Sprintf(
			"---------\n"+
				"## ? Verdict: %s\n\n"+
				"---------\n", hashResponse.Verdict))
	}
	sb.WriteString("## General Details\n\n")

	malwareDetails := fmt.Sprintf(
		"- Threat Level: %s\n"+
			"- File Type: %s\n"+
			"- VX Family: %s\n"+
			"- Total Signatures: %s\n", strconv.Itoa(hashResponse.ThreatLevel), hashResponse.Type, hashResponse.VX_Family, strconv.Itoa(hashResponse.TotalSignatures))

	sb.WriteString(malwareDetails)

	sb.WriteString("## Hosts Connections\n")
	for _, host := range hashResponse.Hosts {
		hostDetails := fmt.Sprintf("- %s\n", host)
		sb.WriteString(hostDetails)
	}
	sb.WriteString("## Domains\n")
	for _, domain := range hashResponse.Domains {
		domainDetails := fmt.Sprintf("- %s\n", domain)
		sb.WriteString(domainDetails)
	}
	sb.WriteString("## Tags\n")
	for _, tag := range hashResponse.Tags {
		tagDetail := fmt.Sprintf("- %s\n", tag)
		sb.WriteString(tagDetail)
	}
	rt.ParseMarkdown(sb.String())
	rt.Refresh()
}

// updateMalwareReportAnalysis updates the RichText widget's content with updated Markdown text with provided AnalysisResponse.
func updateMalwareReportAnalysis(rt *widget.RichText, hashResponse MalwareAnalysis.AnalysisResponse) {
	var sb strings.Builder
	sb.WriteString("# General Details")
	switch hashResponse.Verdict {
	case "malicious":
		sb.WriteString(fmt.Sprintf(
			"---------\n"+
				"## ⚠ Verdict: %s\n\n"+
				"---------\n", hashResponse.Verdict))
	case "no specific threat":
		sb.WriteString(fmt.Sprintf(
			"---------\n"+
				"## ✔ Verdict: %s\n\n"+
				"---------\n", hashResponse.Verdict))
	case "suspicious":
		sb.WriteString(fmt.Sprintf(
			"---------\n"+
				"## ? Verdict: %s\n\n"+
				"---------\n", hashResponse.Verdict))
	}

	sb.WriteString("## General Details\n\n")

	malwareDetails := fmt.Sprintf(
		"- Threat Level: %s\n"+
			"- File Type: %s\n"+
			"- VX Family: %s\n", strconv.Itoa(hashResponse.ThreatLevel), hashResponse.Type, hashResponse.VX_Family)

	sb.WriteString(malwareDetails)

	sb.WriteString("## Hosts Connections\n")
	for _, host := range hashResponse.Hosts {
		hostDetails := fmt.Sprintf("- %s\n", host)
		sb.WriteString(hostDetails)
	}
	sb.WriteString("## Domains\n")
	for _, domain := range hashResponse.Domains {
		domainDetails := fmt.Sprintf("- %s\n", domain)
		sb.WriteString(domainDetails)
	}
	sb.WriteString("## Tags\n")
	for _, tag := range hashResponse.Tags {
		tagDetail := fmt.Sprintf("- %s\n", tag)
		sb.WriteString(tagDetail)
	}
	rt.ParseMarkdown(sb.String())
	rt.Refresh()
}

// updateMalwareReportAnalysis updates the RichText widget's content with updated Markdown text with provided HashResponse.
func updateSignReport(signaturesReport *widget.RichText, signatures []MalwareAnalysis.Signature, currentPage *int, prevBtn, nextBtn *widget.Button) {
	startIndex := (*currentPage - 1) * signItemsPerPage
	endIndex := startIndex + signItemsPerPage
	if endIndex > len(signatures) {
		endIndex = len(signatures)
	}

	var sb strings.Builder
	sb.WriteString("# Signatures Report\n\n")
	// Looping over signatures and adding it to string builder
	for _, signature := range signatures[startIndex:endIndex] {
		sb.WriteString(fmt.Sprintf("## Category: %s\n"+
			"- **Signature Name**: %s \n\n"+
			"- **Threat Level**: %s\n"+
			"- **Identifier**: %s\n"+
			"- **Type**: %s\n"+
			"- **Relevance**: %s\n"+
			"- **Origin**: %s\n"+
			"- **ATT&CK ID**: %s\n"+
			"- **CAPEC ID**: %s\n"+
			"- **ATT&CK ID Wiki**: [%s](%s)\n",
			signature.Category, signature.Name, strconv.Itoa(signature.ThreatLevel), signature.Identifier, strconv.Itoa(signature.Type), strconv.Itoa(signature.Relevance), signature.Origin, signature.ATTCKID, signature.CAPECID, signature.ATTCKIDWiki, signature.ATTCKIDWiki))
	}

	signaturesReport.ParseMarkdown(sb.String())

	// Pagination controls update
	totalPages := (len(signatures) + signItemsPerPage - 1) / signItemsPerPage
	prevBtn.Enable()
	nextBtn.Enable()

	if *currentPage == 1 {
		prevBtn.Disable()
	}
	if *currentPage == totalPages || totalPages == 0 {
		nextBtn.Disable()
	}

	// Set actions for pagination buttons
	prevBtn.OnTapped = func() {
		if *currentPage > 1 {
			*currentPage--
			updateSignReport(signaturesReport, signatures, currentPage, prevBtn, nextBtn)
		}
	}
	nextBtn.OnTapped = func() {
		if *currentPage < totalPages {
			*currentPage++
			updateSignReport(signaturesReport, signatures, currentPage, prevBtn, nextBtn)
		}
	}
}

// updateMitreReport updates the MITRE ATT&CK report card with the techniques and tactics and allows pagination across the information
func updateMitreReport(mitreReport *widget.RichText, attacks []MalwareAnalysis.MitreAttack, currentPage *int, prevBtn, nextBtn *widget.Button) {
	startIndex := (*currentPage - 1) * mitreItemsPerPage
	endIndex := startIndex + mitreItemsPerPage
	if endIndex > len(attacks) {
		endIndex = len(attacks)
	}

	var sb strings.Builder
	sb.WriteString("# Mitre Attck Report\n\n")

	for _, attack := range attacks[startIndex:endIndex] {
		sb.WriteString(fmt.Sprintf("## ATT&CK ID: %s\n\n "+
			"- **Tactic**: %s\n\n "+
			"- **Technique**: %s\n"+
			"- **ATT&CK Wiki**: [%s](%s)\n ", attack.AttckID, attack.Tactic, attack.Technique, attack.AttackWiki, attack.AttackWiki))
	}

	mitreReport.ParseMarkdown(sb.String())

	// Pagination controls update
	totalPages := (len(attacks) + mitreItemsPerPage - 1) / mitreItemsPerPage
	prevBtn.Enable()
	nextBtn.Enable()

	if *currentPage == 1 {
		prevBtn.Disable()
	}
	if *currentPage == totalPages || totalPages == 0 {
		nextBtn.Disable()
	}

	// Set actions for pagination buttons
	prevBtn.OnTapped = func() {
		if *currentPage > 1 {
			*currentPage--
			updateMitreReport(mitreReport, attacks, currentPage, prevBtn, nextBtn)
		}
	}
	nextBtn.OnTapped = func() {
		if *currentPage < totalPages {
			*currentPage++
			updateMitreReport(mitreReport, attacks, currentPage, prevBtn, nextBtn)
		}
	}
}

// showHelpDialog used to display the instructions for th applications and create some copiable hashes to all the user to test te hash search
func showHelpDialog(app fyne.App, parent fyne.Window) {
	// Custom function to create a row for hash and copy button
	makeHashRow := func(hash string) fyne.CanvasObject {
		label := widget.NewLabel(hash)
		// Making the hash text bold
		label.TextStyle = fyne.TextStyle{Bold: true}
		copyBtn := widget.NewButton("Copy", func() {
			parent.Clipboard().SetContent(hash)
		})
		return container.NewHBox(label, copyBtn)
	}

	instructions := widget.NewLabel("Welcome to the Malware Analysis Tool. This tool allows you to quickly analyze malware hashes or submit files for analysis. Here's how to use this program:\n\n" +
		"1. Enter a known file hash in the provided text field and press the 'Search entered hash' button to retrieve its malware report.\n" +
		"2. To analyze a local file, click the 'Select file to scan' button and choose a file from your system. The analysis results will be displayed in the report tabs.\n" +
		"3. Navigate through the report tabs to view different aspects of the malware analysis, including basic information, MITRE ATT&CK details, and detected signatures.\n" +
		"4. Use the 'Switch Theme' button to toggle between dark and light mode for your preference.\n\n" +
		"Test these hashes to see how it works:")

	hashesContainer := container.NewVBox(
		makeHashRow("094fd325049b8a9cf6d3e5ef2a6d4cc6a567d7d49c35f8bb8dd9e3c6acf3d78d"),
		makeHashRow("7f7323ef90321761d5d058a3da7f2fb622823993a221a8653a170fe8735f6a45"),
		makeHashRow("178ba564b39bd07577e974a9b677dfd86ffa1f1d0299dfd958eb883c5ef6c3e1"),
	)

	content := container.NewVBox(instructions, hashesContainer)
	dialog := dialog.NewCustom("Help", "Close", container.NewVScroll(content), parent)
	dialog.Resize(fyne.NewSize(600, 400)) // Adjust the size of the dialog window as necessary
	dialog.Show()
}
